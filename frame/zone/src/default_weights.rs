
//! Autogenerated weights for `pallet_zone`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-12-11, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/neatcoin
// benchmark
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_zone
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// frame/zone/src/default_weights.rs
// --template
// res/default_weights.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight as DbWeight}};
use sp_std::marker::PhantomData;

impl crate::WeightInfo for () {
	// Storage: Registry Ownerships (r:1 w:0)
	// Storage: Zone As (r:0 w:1)
	fn set_a() -> Weight {
		(27_500_000 as Weight)
			.saturating_add(DbWeight::get().reads(1 as Weight))
			.saturating_add(DbWeight::get().writes(1 as Weight))
	}
	// Storage: Registry Ownerships (r:1 w:0)
	// Storage: Zone AAAAs (r:0 w:1)
	fn set_aaaa() -> Weight {
		(28_800_000 as Weight)
			.saturating_add(DbWeight::get().reads(1 as Weight))
			.saturating_add(DbWeight::get().writes(1 as Weight))
	}
	// Storage: Registry Ownerships (r:1 w:0)
	// Storage: Zone NSs (r:0 w:1)
	fn set_ns() -> Weight {
		(29_800_000 as Weight)
			.saturating_add(DbWeight::get().reads(1 as Weight))
			.saturating_add(DbWeight::get().writes(1 as Weight))
	}
	// Storage: Registry Ownerships (r:1 w:0)
	// Storage: Zone CNAMEs (r:0 w:1)
	fn set_cname() -> Weight {
		(29_900_000 as Weight)
			.saturating_add(DbWeight::get().reads(1 as Weight))
			.saturating_add(DbWeight::get().writes(1 as Weight))
	}
	// Storage: Registry Ownerships (r:1 w:0)
	// Storage: Zone MXs (r:0 w:1)
	fn set_mx() -> Weight {
		(29_500_000 as Weight)
			.saturating_add(DbWeight::get().reads(1 as Weight))
			.saturating_add(DbWeight::get().writes(1 as Weight))
	}
	// Storage: Registry Ownerships (r:1 w:0)
	// Storage: Zone ICANNs (r:0 w:1)
	fn set_icann() -> Weight {
		(22_700_000 as Weight)
			.saturating_add(DbWeight::get().reads(1 as Weight))
			.saturating_add(DbWeight::get().writes(1 as Weight))
	}
	// Storage: Registry Ownerships (r:1 w:0)
	// Storage: Zone OpenNICs (r:0 w:1)
	fn set_opennic() -> Weight {
		(22_600_000 as Weight)
			.saturating_add(DbWeight::get().reads(1 as Weight))
			.saturating_add(DbWeight::get().writes(1 as Weight))
	}
	// Storage: Registry Ownerships (r:1 w:0)
	// Storage: Zone Handshakes (r:0 w:1)
	fn set_handshake() -> Weight {
		(22_600_000 as Weight)
			.saturating_add(DbWeight::get().reads(1 as Weight))
			.saturating_add(DbWeight::get().writes(1 as Weight))
	}
	// Storage: Registry Ownerships (r:1 w:0)
	// Storage: Zone Handshakes (r:0 w:1)
	// Storage: Zone ICANNs (r:0 w:1)
	// Storage: Zone OpenNICs (r:0 w:1)
	fn reset_extern() -> Weight {
		(26_400_000 as Weight)
			.saturating_add(DbWeight::get().reads(1 as Weight))
			.saturating_add(DbWeight::get().writes(3 as Weight))
	}
}
